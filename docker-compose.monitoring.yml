version: '3'
services:

######################################### Grafana #########################################

  grafana:
    container_name: grafana
    user: "0"
    environment:
      - GF_SERVER_ROOT_URL=http://${IP_ADDRESS}:3000
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_HOME=/usr/share/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
      - GF_UNIFIED_ALERTING_SCREENSHOTS_CAPTURE=true
      - GF_UNIFIED_ALERTING_SCREENSHOTS_UPLOAD_EXTERNAL_IMAGE_STORAGE=true
      - GF_EXTERNAL_IMAGE_STORAGE_PROVIDER=local
      - GF_RENDERING_SERVER_URL=http://${IP_ADDRESS}:8085/render
      - GF_RENDERING_CALLBACK_URL=http://${IP_ADDRESS}:3005
    hostname: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3005:3000"
    volumes:
      # to be modified depending on your needs
      - ./data/grafana/data:/var/lib/grafana
      - ./data/grafana/provisioning:/etc/grafana/provisioning

  grafana-renderer:
    container_name: grafana-renderer
    image: hferreira/grafana-image-renderer:latest
    hostname: grafana-renderer
    ports:
      - "8085:8081"
    restart: unless-stopped

######################################### Speedtest-utility #########################################

  speedtest:
    image: openspeedtest/latest
    container_name: speedtest
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "5002:3000"

  iperf:
    image: networkstatic/iperf3
    container_name: iperf
    restart: unless-stopped
    command: ["-s", "-V"]
    network_mode: "host"

  speedtest-tracker:
    container_name: speedtest-tracker
    ports:
      - '8380:80'
      - '8343:443'
    environment:
      - PUID=1000
      - PGID=1000
      - DB_CONNECTION=pgsql
      - DB_HOST=speedtest-tracker-db
      - DB_PORT=5432
      - DB_DATABASE=speedtest_tracker
      - DB_USERNAME=speedy
      - DB_PASSWORD=password
    volumes:
      - './data/speedtest-tracker/config:/config'
      - './data/speedtest-tracker/web:/etc/ssl/web'
    image: 'ghcr.io/alexjustesen/speedtest-tracker:latest'
    restart: unless-stopped
    depends_on:
      - speedtest-tracker-db

  speedtest-tracker-db:
    container_name: speedtest-tracker-db
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_DB=speedtest_tracker
      - POSTGRES_USER=speedy
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/speedtest-tracker/db:/var/lib/postgresql/data

######################################### Influx #########################################

  influxdb:
    image: influxdb:2.7.1
    container_name: influxdb
      #mem_limit: "4g"
    restart: always
    network_mode: "host"
    volumes:
      #- ./data/influxdb/data:/var/lib/influxdb
      #- ./data/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - ./data/influxdb2:/var/lib/influxdb2
      - ./data/influxdb2:/etc/influxdb2
        #- ./data/influxdb/init:/docker-entrypoint-initdb.d
    environment:
      - INFLUXDB_ADMIN_USER=${INFLUXDB_USERNAME} # sourced from .env
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD} # sourced from .env
        #      - DOCKER_INFLUXDB_INIT_MODE=upgrade
        #      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
        #      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
        #      - DOCKER_INFLUXDB_INIT_ORG=homie
        #      - DOCKER_INFLUXDB_INIT_BUCKET=homie-bucket
        #      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}

  telegraf:
    build:
      context: .
      dockerfile: ./containers/telegraf/Dockerfile
    restart: always
    container_name: telegraf
    network_mode: "host"
    init: true
    command: ["--config-directory", "/etc/telegraf/telegraf.d"]
    privileged: true
    environment:
      - HOST_ETC=/hostfs/etc
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
      - HOST_MOUNT_PREFIX=/hostfs
      - COMMUNITY_STRING=${COMMUNITY_STRING}
      - INFLUXDB_USERNAME=${INFLUXDB_USERNAME}
      - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUXDB_AUTH_TOKEN=${INFLUXDB_ADMIN_TOKEN}
      - INFLUXDB_NAME=${INFLUXDB_NAME}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
    volumes:
      - ./data/telegraf/:/etc/telegraf/telegraf.d/:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock

######################################### Ubiquiti #########################################

  unifi-poller:
    restart: always
    image: ghcr.io/unpoller/unpoller:${POLLER_TAG}
    container_name: unpoller
    network_mode: "host"
    environment:
      - UP_INFLUXDB_DB=${INFLUXDB_NAME}
      - UP_INFLUXDB_USER=${INFLUXDB_USERNAME}
      - UP_INFLUXDB_PASS=${INFLUXDB_PASSWORD}
      - UP_INFLUXDB_URL=${INFLUXDB_URL}
      - UP_INFLUXDB_ORG=${INFLUXDB_ORG}
      - UP_INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - UP_INFLUXDB_AUTH_TOKEN=${INFLUXDB_ADMIN_TOKEN}
      - UP_UNIFI_DEFAULT_USER=${UNIFI_USER}
      - UP_UNIFI_DEFAULT_PASS=${UNIFI_PASS}
      - UP_UNIFI_DEFAULT_URL=${UNIFI_URL}
      - UP_POLLER_DEBUG=${POLLER_DEBUG}
      - UP_UNIFI_DEFAULT_SAVE_DPI=${POLLER_SAVE_DPI}
      - UP_INFLUXDB_INTERVAL=1m

######################################### MQTT #########################################

  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:latest
    network_mode: "host"
    volumes:
      - ./data/mosquitto/passwd:/mosquitto/passwd
      - ./data/mosquitto/config:/mosquitto/config
    restart: unless-stopped

  tasmota-admin:
    container_name: tasmota-admin
    image: ghcr.io/tasmoadmin/tasmoadmin:latest
    restart: unless-stopped
    ports:
      - "9080:80"

    volumes:
      - ./data/tasmoadmin/:/data

######################################### Uptime-Kuma #########################################

  kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma
    volumes:
      - ./data/uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: 'unless-stopped'
    ports:
      - "5001:3001"

  ntfy:
    image: binwiederhier/ntfy
    container_name: ntfy
    command:
      - serve
    environment:
      - TZ=UTC    # optional: set desired timezone
    volumes:
      - ./data/ntfy/var/cache/ntfy:/var/cache/ntfy
      - ./data/ntfy/etc/ntfy:/etc/ntfy
    ports:
      - "8090:80"
    restart: unless-stopped

######################################### Checkmk #########################################

  cmk:
    build:
      context: .
      dockerfile: ./containers/cmk/Dockerfile
        #image: localhost:5000/cmk
    container_name: cmk
      #mem_limit: "2g"
    environment:
      - CMK_SITE_ID=cmk
      - CMK_PASSWORD=${CMK_PASSWORD}
    network_mode: "host"
        #ports:
        #- 7001:5000
        #- 7002:8000
    tmpfs:
      - /opt/omd/sites/cmk/tmp:uid=1000,gid=1000
    volumes:
      - ./data/cmk:/omd/sites
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    labels:
      - wud.watch=false

######################################### Disks #########################################

  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    restart: unless-stopped
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    ports:
      - "8083:8080" # webapp
      - "8084:8086" # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - ./data/scrutiny/config:/opt/scrutiny/config
      - ./data/scrutiny/influxdb:/opt/scrutiny/influxdb
    devices:
      - "/dev/sda"
      - "/dev/sdb"
      - "/dev/sdc"
      - "/dev/sdd"
      - "/dev/nvme0"

######################################### Docker #########################################

  whatsupdocker:
    image: fmartinou/whats-up-docker:latest
    container_name: wud
    hostname: wud
    restart: unless-stopped
    environment:
      WUD_WATCHER_LOCAL_CRON: 0 0 * * *
        #WUD_REGISTRY_HUB_LOGIN: ${DOCKER_UNAME}
        #WUD_REGISTRY_HUB_PASSWORD: ${DOCKER_UPWD}
        #WUD_REGISTRY_HUB_TOKEN: ${DOCKER_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/wdu:/store
    ports:
      - "3014:3000"

######################################### Prometheus #########################################

  prometheus:
    container_name: prom-server
    image: prom/prometheus
    volumes:
      - ./data/prometheus/etc:/etc/prometheus/
      - ./data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    user: "root"
    ports:
      - "9091:9090"
    links:
      - alertmanager:alertmanager
    networks:
      - prometheus
    restart: unless-stopped

  alertmanager:
    container_name: prom-alertmanager
    image: prom/alertmanager
    ports:
      - "9093:9093"
        #volumes:
        #- ./data/alertmanager/:/etc/alertmanager/
    networks:
      - prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'

  pihole-exporter:
    container_name: pihole-exporter
    image: ekofr/pihole-exporter:latest
    restart: unless-stopped
    ports:
      - "9617:9617"
    environment:
      - PORT=9617
      - PIHOLE_PROTOCOL=http,http
      - PIHOLE_PASSWORD=MtuXn6gHYrcv
      - PIHOLE_HOSTNAME=192.168.1.10,192.168.1.85
      - PIHOLE_PORT=80,6080

  tankerkoenig-exporter:
    container_name: tanker-exporter
    image: ghcr.io/lukasmalkmus/tankerkoenig_exporter:0.12.0
    restart: unless-stopped
    ports:
      - 9386:9386
    environment:
      - TANKERKOENIG_API_KEY=${TANKERKOENIG_API_KEY}
    command:
      - '--tankerkoenig.location=${TANKERKOENIG_LOCATION}'
      - '--tankerkoenig.radius=5'

######################################### Pi-Alert #########################################

  pialert:
    container_name: pialert
    image: "jokobsk/pi.alert:latest"
    network_mode: "host"
    restart: unless-stopped
    volumes:
      - ./data/pialert/config:/home/pi/pialert/config
      - ./data/pialert/db:/home/pi/pialert/db
      # (optional) useful for debugging if you have issues setting up the container
      - ./data/pialert/logs:/home/pi/pialert/front/log
    environment:
      - TZ=Europe/Berlin
      - HOST_USER_ID=1000
      - HOST_USER_GID=1000
      - PORT=20211

######################################### Homeassistant #########################################

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
      #mem_limit: "1024m"
    volumes:
      - ./data/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    privileged: true
    network_mode: host

networks:
  prometheus:

